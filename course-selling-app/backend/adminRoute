const express = require("express");
const {Admin,Course} = require("./mongoose");
const router = express.Router();
const jwt = require("jsonwebtoken");
const JWT_SECRET = "aryan_project1";
const adminMiddleware = require("./adminMiddleware")
const z = require("zod");

const adminSchema = z.object({
  username: z.string().min(1, "Username required"),
  password: z.string().min(1, "Password required")
});
const courseSchema = z.object({
    name:z.string().min(1),
    description:z.string(),
    price:z.number().min(1),
    tutorName:z.string().min(1)
})
router.post('/signup',async(req,res) => {
     const parsedInputs = adminSchema.safeParse(req.body);
    if (!parsedInputs.success){
        return res.json({
          msg:"enter correct inputs"
        })
    }
    else{
         const {username,password} = parsedInputs.data;

        const alreadyExists = await Admin.findOne({
        username,
});

    if(alreadyExists){
         return res.status(409).json({
            msg:"admin with given credentials already exists"
        });
    }else{
    await Admin.create({
            username,
            password
        })
        return res.json({
            msg:"Admin created successfully"
        })
    }
        }
   
})

router.post('/signin',async (req,res) => {

     const parsedInputs = adminSchema.safeParse(req.body);
        if(!parsedInputs.success){
             return res.status(400).json({
            msg:"enter correct inputs"
        })
        }
        else{
        const {username,password} = parsedInputs.data;
        const admin = await Admin.findOne({
            username
        });
        if(admin){
            const token  = jwt.sign({
                username
            },JWT_SECRET);
            res.json({
                token
            });
        }
        else{
            res.status(411).json({
                msg:"admin doesn't exist"
            })
        }
        }
       
})

router.get('/showCourses',adminMiddleware,async(req,res) => {
    const courses = await Course.find({})  
    res.json({
            courses
        })
});

router.post('/createCourses',adminMiddleware,async (req,res) => {

    const parsedInputs = courseSchema.safeParse(req.body);
    if(!parsedInputs.success){
       return res.json({
            msg:"invalid inputs"
        })
    }
    else{
const {name,description,price,tutorName} = parsedInputs.data;
    try{
        const courses = await Course.create({
            name,description,price,tutorName
        });
        res.json({
            msg:"course created successfully",
            courseId:courses._id
        });
    }
    catch(e){
        res.status(500).json({
            msg:"cannot create course"
        })
    }
    }
    
})

module.exports = router;